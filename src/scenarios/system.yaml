#config:
#  target: "http://localhost:3001"
#  phases:
#    - duration: 60
#      arrivalRate: 3
#      maxVusers: 5
#      name: "Ramp Up Stage 1"
#    - duration: 120
#      arrivalRate: 7
#      maxVusers: 10
#      name: "Ramp Up Stage 2"
#    - duration: 120
#      arrivalRate: 10
#      maxVusers: 15
#      name: "Ramp Up Stage 3"
#    - duration: 120
#      arrivalRate: 12
#      maxVusers: 20
#      name: "Ramp Up Stage 4"
#  variables:
#    commentsNumber: 2
#  payload:
#    path: "./../data/people.csv"
#    fields:
#      - "userId"
#      - "userName"
#      - "userEmail"
#    order: sequence  # sequence # random
#    skipHeader: true
#  defaults:
#    headers:
#      Content-Type: "application/json"
#      Accept: "application/json"
#  http:
#    # Responses have to be sent within 20 seconds, or an `ETIMEDOUT` error gets raised.
#    timeout: 20
#    extendedMetrics: false
#  ensure:
#    thresholds:
#      - "http.response_time.p99": 15000
#        strict: false
#      - "http.response_time.p95": 14000
#        strict: false
#      - "vusers.failed": 20
#        strict: true
#        shutdown: true
#    conditions:
#      - expression: vusers.failed <= 30
#        strict: true
#        shutdown: true
#  processor: "../processors/main.js"
#  plugins:
#    ensure: { }
#    ensure-shutdown: { }
#    expect:
#      outputFormat: prettyError # prettyError # pretty # silent
#    metrics-by-endpoint:
#      useOnlyRequestNames: true
#    publish-metrics:
#      - type: datadog
#        host: 127.0.0.1
#        port: 8126
#        prefix: 'artillery.publish_metrics_plugin.'
#        tags:
#          - "mode:load"
#          - "scenario:system"
#          - "env:local"
#        event:
#          priority: low
#          tags:
#            - "testId:mytest123"
##    advanced-metrics:
##      host: 'localhost' # statsd server host
##      port: 8126 # statsd port
##      prefix: "artillery.publish_metrics_plugin" # metrics prefix. Metrics path will be: {prefix}.plugins.advanced_metrics.errors

before:
  flow:
    - log: "Starting Json-Server benchmarking."

scenarios:
  - name: Post Writer Scenario
    weight: 1
    flow:
      #- log: "Authenticate and get token"
      - get:
          url: "/get_token"
          name: "GET/get_token"
          auth:
            user: "test"
            pass: "test"
          capture:
            - json: "$.token"
              as: token
          expect:
            - statusCode: 200
      #- log: "Found Token: {{ token }}"
      - think: 0.5
      - post:
          url: "/users"
          name: "POST/users"
          headers:
            Authorization: "Bearer {{ token }}"
          expect:
            - statusCode: 201
            - hasProperty: id
          beforeRequest: "userBody"
          afterResponse: "saveUserId"
      #- log: "Found User: {{ userId }} {{ userEmail }}"
      - think: 2
      - post:
          url: "/posts"
          name: "POST/posts"
          capture:
            - json: "$.id"
              as: "postId"
            - json: "$.comments"
              as: "postComments"
          expect:
            - statusCode: 202
            - hasProperty: id
          beforeRequest: "postBody"
          afterResponse: "savePost"
      - think: 2
      ### Create Comments
      - loop:
          - post:
              url: "/comments"
              name: "POST/comments"
              capture:
                - json: "$.id"
                  as: "commentId"
              expect:
                - statusCode: 201
                - hasProperty: id
              beforeRequest: "commentBody"
          - put:
              url: "/posts/{{ postId }}"
              name: "PUT/posts/ID"
              expect:
                - statusCode: 200
              beforeRequest: "commentsUpdateBody"
              afterResponse: "savePost"
          - think: 1
        #count: "{{ commentsNumber }}"
        count: 3
      - think: 1

  - name: Post Reader Scenario
    weight: 2
    flow:
      #- log: "Get posts"
      #- log: "Found user {{ userId }} {{ userName }}"
      #- function: "randomFailure" # 50% of all the scenarios will fail with error: "Failed Scenario"
      - get:
          url: "/posts"
          name: "GET/posts"
          capture:
            - json: "$[0].id"
              as: postId
          expect:
            - statusCode: 200
            - hasProperty: "[0].id"
            - equals:
                - "{{postId}}"
                - "1"
          afterResponse: "getPosts"
      #- log: "Found Posts: {{ postIds }}"
      #- log: "Found Post: {{ postId }}"
      - think: 1
      - loop:
          - get:
              url: "/posts/{{ $loopElement }}"
              name: "GET/posts/ID"
              expect:
                - statusCode: 200
                - hasProperty: id
        over: postIds
      - think: 2
      - get:
          url: "/posts/{{ postId }}"
          name: "GET/posts/ID"
          expect:
            - statusCode: 200
            - hasProperty: id
          afterResponse: "getComments"
      #- log: "Found Comment Ids: {{ commentIds }}"
      - loop:
          - get:
              url: "/comments/{{ $loopElement }}"
              name: "GET/comments/ID"
              expect:
                - statusCode: 200
                - hasProperty: id
        over: commentIds
      - think: 2
      # write new comment
      #- function: "getRandomEmail"
      #- log: "Writing comment from {{ userEmail }}"
      - post:
          url: "/comments"
          name: "POST/comments"
          capture:
            - json: "$.id"
              as: "commentId"
          expect:
            - statusCode: 201
            - hasProperty: id
          beforeRequest: "commentBody"
      - think: 1
